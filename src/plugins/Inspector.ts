import moment from 'moment';
import { BasePlugin } from '../core/classes/BasePlugin';
import homeworks from '../core/database/models/diary/homeworks';
import replacements from '../core/database/models/diary/replacements';
import Schedule from '../core/database/models/diary/schedules';
import subjects from '../core/database/models/diary/subjects';
import Broadcaster from '../core/utils/Broadcaster';
import MessageBuilder from '../core/utils/MessageBuilder';

export default class extends BasePlugin {
    constructor() {
        super();
    }

    async execute() {
        const replacementWatcher = replacements.watch();
        const homeworkWatcher = homeworks.watch();
        
        replacementWatcher.on('change', async (res) => {
            if (res.operationType) {
                let message, replacement, replacedSchedule;

                switch (res.operationType) {
                    case ("insert"):
                        replacement = await replacements.findById(res.documentKey).populate('subject', '', subjects);
                        replacedSchedule = await Schedule.findOne({ scheduleId: replacement.replacedSchedule }).populate('subject', '', subjects);
                        
                        message = new MessageBuilder({
                            header: "–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ–Ω–∞!"
                        }).setIcon({ header: '‚ö†Ô∏è' });

                        message.addLine([
                            `üìï –£—Ä–æ–∫ "${replacedSchedule.subject.name}" –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ "${replacement.subject.name}"`,
                            `‚åö –ó–∞–º–µ–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ ${moment(replacement.date, 'DD/MM/YYYY').format('DD MMMM (dddd)')}`,
                            `üî≠ –ö–∞–±–∏–Ω–µ—Ç ‚Ññ${(replacement.location) ? replacement.location : replacement.subject.location}`,
                            `üßë –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${(replacement.teacher) ? replacement.teacher : replacement.subject.teacher}`,
                        ])

                        if (replacement) Broadcaster.broadcastMessage(message.build());
                        break;
                    case ("update"):
                        replacement = await replacements.findById(res.documentKey).populate('subject', '', subjects);
                        replacedSchedule = await Schedule.findOne({ scheduleId: replacement.replacedSchedule }).populate('subject', '', subjects);
                        
                        message = new MessageBuilder({
                            header: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–º–µ–Ω–µ!"
                        }).setIcon({ header: '‚ö†Ô∏è' });

                        message.addLine([
                            `üìï –£—Ä–æ–∫ "${replacedSchedule.subject.name}" –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ "${replacement.subject.name}"`,
                            `‚åö –ó–∞–º–µ–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ ${moment(replacement.date, 'DD/MM/YYYY').format('DD MMMM (dddd)')}`,
                            `üî≠ –ö–∞–±–∏–Ω–µ—Ç ‚Ññ${(replacement.location) ? replacement.location : replacement.subject.location}`,
                            `üßë –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${(replacement.teacher) ? replacement.teacher : replacement.subject.teacher}`,
                        ])

                        if (replacement) Broadcaster.broadcastMessage(message.build());
                        break;
                }
            }
        });

        homeworkWatcher.on('change', async (res) => {
            if (res.operationType) {
                let message, homework;

                switch (res.operationType) {
                    case ("insert"):
                        homework = await homeworks.findById(res.documentKey).populate('subject', '', subjects);
                        
                        message = new MessageBuilder({
                            header: "–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!",
                            footer: `–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: https://diary.ryzhenkov.space/homeworks/${homework.homeworkId}`
                        }).setIcon({ header: 'üè†', footer: 'üîó' });

                        message.addLine([
                            `üìï –ó–∞–¥–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É "${homework.subject.name}"`,
                            `‚åö –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–∞—Ç—å –¥–æ ${moment(homework.date, 'DD/MM/YYYY').format('DD MMMM (dddd)')}`,
                        ])

                        if (homework) Broadcaster.broadcastMessage(message.build());
                        break;
                    case ("update"):
                        homework = await homeworks.findById(res.documentKey).populate('subject', '', subjects);
                        
                        message = new MessageBuilder({
                            header: "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                            footer: `–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: https://diary.ryzhenkov.space/homeworks/${homework.homeworkId}`
                        }).setIcon({ header: 'üóûÔ∏è', footer: 'üîó' });

                        message.addLine([
                            `üìï –ó–∞–¥–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É "${homework.subject.name}"`,
                            `‚åö –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–∞—Ç—å –¥–æ ${moment(homework.date, 'DD/MM/YYYY').format('DD MMMM (dddd)')}`,
                        ])

                        if (homework) Broadcaster.broadcastMessage(message.build());
                        break;
                }
            }
        });
    }
}
