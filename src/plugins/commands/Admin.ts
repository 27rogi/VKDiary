import { MessageContext } from 'vk-io';
import { BaseCommand } from '../../core/classes/BaseCommand';
import schedules from '../../core/database/models/schedules';
import subjects from '../../core/database/models/subjects';

export default class extends BaseCommand {
    constructor() {
        super();
        this.commandData = {
            command: '–∞–¥–º–∏–Ω–∫–∞',
            aliases: ['–∞'],
            permissionLevel: 99,
            local: true,
        };
    }

    async execute(context: MessageContext, args: string[], next: any) {
        if (args.length > 0) {
            switch (args[0]) {
                case '–ø—Ä–µ–¥–º–µ—Ç—ã': {
                    const subjectList = await subjects.find().sort({ subjectId: 1 }).populate('payload.homeworks').exec();
                    await context.send(`–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—Å–æ—Ä—Ç. 0-9)`);

                    for (const subject of subjectList) {
                        const message = [];
                        message.push(`üî∏ ${subject.name} (id: ${subject.subjectId})`, `–º–µ—Å—Ç–æ: ${subject.location}`, `—É—á–∏—Ç–µ–ª—å: ${subject.teacher}`, `—É—Ä–æ–∫–∏: ${subject.payload.homeworks.length > 0 ? 'yes' : 'no'}\n`);
                        await context.send(message.join('\n'));
                    }
                    break;
                }
                case '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': {
                    const scheduleList = await schedules.find().sort({ scheduleId: 1 }).populate('payload.subject payload.replacement payload.time').exec();
                    await context.send(`–°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π (—Å–æ—Ä—Ç. 0-9)`);

                    for (const schedule of scheduleList) {
                        const message = [];
                        message.push(`üî∏ ${schedule.payload.subject.name} (# —Ä–∞—Å–ø–∏—Å.: ${schedule.scheduleId})`, `–¥–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞: ${schedule.subjectDay}`, `—á–µ—Ç–Ω—ã–π?: ${schedule.isEven}`, `–≤—Ä–µ–º—è: ${schedule.payload.time.timeId} (${schedule.payload.time.timeStarts}-${schedule.payload.time.timeEnds})`);
                        if (schedule.payload.replacement !== null) {
                            message.push(
                                `- üí• –Ω–æ–º–µ—Ä –∑–∞–º–µ–Ω—ã: ${schedule.payload.replacement.replacementId} -`,
                                `–∑–∞–º–µ–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Ññ${schedule.payload.replacement.replacedSchedule}`,
                                `–∑–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç ${schedule.payload.replacement.replacingSubject}`,
                                `–¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã ${schedule.payload.replacement.date}`,
                                `–∫–∞–±–∏–Ω–µ—Ç ${schedule.payload.replacement.location}`,
                                `—É—á–∏—Ç–µ–ª—å ${schedule.payload.replacement.teacher}`
                            );
                        }
                        await context.send(message.join('\n'));
                    }
                    break;
                }
                default: {
                    return context.reply('–¢–∞–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç!');
                }
            }
        } else {
            return context.reply('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–¥–æ–±–∞–≤–∏—Ç—å–≤—Ä–µ–º—è <–Ω–∞—á–∞–ª–æ> <–∫–æ–Ω–µ—Ü>');
        }
    }
}
