import moment from 'moment';
import { MongoError } from 'mongodb';
import { MessageContext } from 'vk-io';
import { BaseCommand } from '../../core/classes/BaseCommand';
import homeworks, { IHomeworks } from '../../core/database/models/homeworks';
import subjects from '../../core/database/models/subjects';
import Broadcaster from '../../core/utils/Broadcaster';
import Logger from '../../core/utils/Logger';
import VKClient from '../../core/VKClient';
import Schedules from '../Schedules';

export default class extends BaseCommand {
    constructor() {
        super();
        this.commandData = {
            command: '–¥–æ–º–∞—à–∫–∞',
            aliases: ['–¥–∑', '–∑–∞–¥–∞–Ω–∏—è'],
            permissionLevel: 0,
            local: true
        }
    }

    async execute(context: MessageContext, args: string[], next: any) {

        if (args[0] === '–¥–æ–±–∞–≤–∏—Ç—å') {
            if (args.length > 3 && !Number.isNaN(Number(args[1]))) {
                const subject = await subjects.findOne({ subjectId: Number(args[1]) }).exec();

                const homeworkDeadline = moment(args[2], 'DD.MM.YYYY');
                if (Number.isNaN(homeworkDeadline.date())) {
                    return context.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –¥–∞—Ç—ã, –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - 14.01.21');
                }

                if (subject === null) {
                    return context.reply('–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ!');
                }

                if (context.text.indexOf('\n\n') === -1) {
                    return context.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –µ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.');
                }

                const desc = context.text.substring(context.text.indexOf('\n\n') + 2);
                if (desc === '') {
                    return context.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –µ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.');
                }

                const target: { [item: string]: any } = {
                    description: desc,
                };

                if (context.attachments.length > 0) {
                    target.attachments = [];
                    for (const attachment of context.attachments) {
                        target.attachments.push(attachment.toString());
                    }
                    target.attachments = target.attachments.join(',');
                }

                const homework = new homeworks({
                    subject: args[1],
                    target,
                    deadline: homeworkDeadline.format('DD.MM.YYYY'),
                    creatorId: context.senderId
                });

                homework.save(async (err: MongoError, item) => {
                    if (err) {
                        if (err.code === 11000) {
                            return context.reply('–ó–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –≤–∏–¥–∏–º–æ —ç—Ç–æ –æ—à–∏–±–∫–∞!');
                        }
                        Logger.error(err);
                        return context.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!');
                    }
                    const subject = await subjects.findOne({
                        subjectId: item.subject
                    }).exec();

                    const vkUser = (await VKClient.api.users.get({
                        user_ids: item.creatorId.toString(),
                    }))[0];

                    await new Schedules().reload();

                    Broadcaster.broadcastMessage([
                        `üí• –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!`,
                        ``,
                        `–ü—Ä–µ–¥–º–µ—Ç: ${subject.name}`,
                        `–î–æ–±–∞–≤–∏–ª: ${vkUser.first_name} ${vkUser.last_name}`,
                        `–ù–æ–º–µ—Ä –≤ –±–∞–∑–µ: ${item.homeworkId}`
                    ].join('\n'));

                    return context.reply('–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!');
                });

            } else {
                context.reply([
                    'üî∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–¥–∑ –¥–æ–±–∞–≤–∏—Ç—å <–Ω–æ–º–µ—Ä_–ø—Ä–µ–¥–º–µ—Ç–∞> <–¥–∞—Ç–∞_—Å–¥–∞—á–∏>\n\n<–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n',
                    'üìù –ü—Ä–∏–º–µ—Ä: /–¥–∑ –¥–æ–±–∞–≤–∏—Ç—å 1 17.01.2021\n\n–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤ –≤–∏–∂—É–∞–ª —Å—Ç—É–¥–∏–∏!'
                ].join('\n'));
            }
        } else if (args[0] === '—É–¥–∞–ª–∏—Ç—å') {
            if (args.length > 1 && !Number.isNaN(Number(args[1]))) {
                const homework = await homeworks.findOne({ homeworkId: Number(args[1]) }).exec();

                if (homework === null) {
                    return context.reply('–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ!');
                }

                homework.delete().then((res) => {
                    return context.reply(`–£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º ${res.homeworkId}`);
                });
            } else {
                context.reply('–£–∫–∞–∑–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª–µ–Ω');
            }
        } else {
            let homeworkDate = moment(Date.now());

            if (args[0] !== undefined) {
                homeworkDate = moment(args[0], 'DD.MM.YYYY');
            }

            const homeworkList = await homeworks.find().sort({ homeworkId: 1 }).exec();
            const availableHomeworks: IHomeworks[] = [];

            homeworkList.forEach(async (homework) => {
                const dateDiff = moment(homework.deadline, 'DD.MM.YYYY').diff(homeworkDate, 'days');
                if (dateDiff > -1 && dateDiff < 7) {
                    availableHomeworks.push(homework);
                }
            })

            if (availableHomeworks.length <= 0) {
                return context.reply('–î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! :)');
            }

            for (const homework of availableHomeworks) {
                const subject = await subjects.findOne({ subjectId: homework.subject }).exec();
                const vkUser = (await VKClient.api.users.get({
                    user_ids: homework.creatorId.toString(),
                }))[0];

                context.send([
                    `ü§ì –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ${subject.name}`,
                    ``,
                    `‚åö –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–∞—Ç—å –¥–æ ${homework.deadline}`,
                    `üë• –î–æ–±–∞–≤–∏–ª: ${vkUser.first_name} ${vkUser.last_name}`,
                    `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${homework.target.description}`,
                ].join('\n'));

                if (homework.target.attachments) {
                    await context.send({
                        message: 'üî∏ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:',
                        attachment: homework.target.attachments
                    })
                }
            }
        }
    }
}
