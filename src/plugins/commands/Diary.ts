import moment from 'moment';
import { MessageContext } from 'vk-io';
import { BaseCommand } from '../../core/classes/BaseCommand';
import replacements from '../../core/database/models/replacements';
import schedules from '../../core/database/models/schedules';
import subjects from '../../core/database/models/subjects';
import subjectTimes from '../../core/database/models/subjectTimes';
import Cleaner from '../../core/utils/Cleaner';
import Time from '../../core/utils/Time';

export default class extends BaseCommand {
    constructor() {
        super();
        this.commandData = {
            command: '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
            aliases: ['–¥–Ω–µ–≤–Ω–∏–∫', '—É—Ä–æ–∫–∏', '—Ä–∞—Å–ø'],
            permissionLevel: 0,
            local: false,
        };
    }

    async execute(context: MessageContext, args: string[], next: any) {
        let dayOfMonth = moment().date();

        if (args[0] !== undefined) {
            if (Number(args[0]) > 31 || Number(args[0]) <= 0) {
                return context.reply('–î–µ–Ω—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç 1 –¥–æ 31');
            }

            dayOfMonth = Number(args[0]);
        }

        let weekDay = moment(dayOfMonth, 'DD').day();
        let month = moment().add(1, 'month').month();

        if (dayOfMonth < 7 && !args[1]) {
            if (moment().endOf('month').date() >= 28) {
                month += 1;
                weekDay = moment(`${Number(args[0])} ${month}`, 'DD MM').day();
                await context.send(`–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞, —á—Ç–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è /—Ä–∞—Å–ø ${dayOfMonth} ${month - 1}`);
            }
        }

        if (args[1]) {
            if (Number(args[1]) <= 12 && Number(args[1]) > 0) {
                month = Number(args[1]);
                weekDay = moment(`${Number(args[0])} ${month}`, 'DD MM').day();
            } else {
                return context.reply('–ú–µ—Å—è—Ü –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç 1 –¥–æ 12');
            }
        }

        if (Number.isNaN(weekDay)) {
            return context.reply('–í —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —á–∏—Å–ª–æ ' + args[0]);
        }

        const isWeekEven = Time.isEvenWeek(moment(`${dayOfMonth} ${month}`, 'DD MM'));

        const message: string[] = [`üëå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ ${moment(`${dayOfMonth} ${month}`, 'DD MM').format('dddd DD MMM')} [${isWeekEven ? '—á–µ—Ç–Ω.' : '–Ω–µ—á–µ—Ç–Ω.'}]\n`];

        await Cleaner.cleanAll();

        const currentSchedule = await schedules.find({ subjectDay: weekDay, isEven: isWeekEven }).sort({ subjectTime: 1 }).exec();
        if (currentSchedule.length <= 0) {
            return context.reply('–í –¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å —É—Ä–æ–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üôåüòä');
        }

        for (const schedule of currentSchedule) {
            let subject = await subjects.findOne({ subjectId: schedule.subjectId }).exec();

            const replacement = await replacements
                .findOne({
                    replacedSchedule: schedule.scheduleId,
                    date: moment(`${dayOfMonth} ${month}`, 'DD MM').format('DD.MM.YYYY'),
                })
                .exec();

            if (replacement !== null) {
                subject = await subjects.findOne({ subjectId: replacement.replacingSubject }).exec();
                if (replacement.teacher) subject.teacher = replacement.teacher;
                if (replacement.location) subject.location = replacement.location;
            }

            const subjectTime = await subjectTimes.findOne({ timeId: schedule.subjectTime }).exec();
            message.push(`üî∏ ${subject.name} (#${subject.subjectId}) ${replacement !== null ? '(–ó–∞–º–µ–Ω–∞)' : ''}`, `‚†Ä‚åö –£—Ä–æ–∫ –∏–¥–µ—Ç —Å ${subjectTime.timeStarts} –ø–æ ${subjectTime.timeEnds}`, `‚†Äüß≠ –ö–∞–±–∏–Ω–µ—Ç: ${subject.location}`, `‚†Äüßë‚Äç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${subject.teacher}`, `‚†Äüîç –ù–æ–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ: ${schedule.scheduleId}\n`);
        }

        await context.reply(message.join('\n'));
    }
}
